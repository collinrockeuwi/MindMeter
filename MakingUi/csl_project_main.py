# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'makingui3.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from SelfEsteemTab import SelfEsteemTab  # Import the class
from DepressionTab import DepressionTab  # Import the class
from StressTab import StressTab # Import the class
from GeneralTab import GeneralTab # Import the class
from PreviewTab import PreviewTab # Import the class
from DataBaseTab import DataBaseTab # Import the class
from DatabaseManager import DatabaseManager # Import the class
from MainWindow import MainWindow # Import the class
from MainWindow2 import MainWindow2 # Import the class


class Ui_PsycheEval_MainWindow(object):
    def setupUi(self, PsycheEval_MainWindow):
       

        self.MainWindow = MainWindow(PsycheEval_MainWindow)
        self.MainWindow2 = MainWindow2(PsycheEval_MainWindow, self.MainWindow)
        

#stack widget           #stack widget           #stack widget           #stack widget              
#stack widget           #stack widget           #stack widget           #stack widget  
#stack widget           #stack widget           #stack widget           #stack widget  
#stack widget           #stack widget           #stack widget           #stack widget  
#stack widget           #stack widget           #stack widget           #stack widget  
#stack widget           #stack widget           #stack widget           #stack widget  




        self.Active_widget = QtWidgets.QWidget(self.MainWindow2.MainWindow_2)
        self.Active_widget.setObjectName("Active_widget")
        self.Active_widget_vertical_lyt = QtWidgets.QVBoxLayout(self.Active_widget)
        self.Active_widget_vertical_lyt.setObjectName("Active_widget_vertical_lyt")
        self.stackedWidget = QtWidgets.QStackedWidget(self.Active_widget)
        self.stackedWidget.setStyleSheet("QLabel {\n"
" \n"
"    qproperty-alignment: \'AlignVCenter | AlignLeft\'; /* Vertically centered and left-aligned */\n"
"  \n"
"}\n"
"")
        self.stackedWidget.setObjectName("stackedWidget")

#Button Connection              #Button Connection              #Button Connection              #Button Connection
#Button Connection              #Button Connection              #Button Connection              #Button Connection
#Button Connection              #Button Connection              #Button Connection              #Button Connection
#Button Connection              #Button Connection              #Button Connection              #Button Connection
#Button Connection              #Button Connection              #Button Connection              #Button Connection
        self.MainWindow.General_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        self.MainWindow.Stress_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.MainWindow.Depression_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.MainWindow.SelfEsteem_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.MainWindow.Preview_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(4))
        self.MainWindow.Database_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(5))

        self.MainWindow.expanded_icon_General_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(3))
        self.MainWindow.expanded_icon_Stress_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(2))
        self.MainWindow.expanded_icon_Depression_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(1))
        self.MainWindow.expanded_icon_Depression_pushButton.clicked.connect(lambda: self.DepressionTab.Depression_Page_tabWidget.setCurrentIndex(0))

        self.MainWindow.expanded_icon_SelfEsteem_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))
        self.MainWindow.expanded_icon_Preview_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(4))
        self.MainWindow.expanded_icon_Database_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(5))

                



#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page         
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 
#SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page                #SelfEsteem Page 

        # Create an instance of the SelfEsteemTab class
        self.selfEsteemTab = SelfEsteemTab(PsycheEval_MainWindow, self.stackedWidget)

         # Connect the SelfEsteem_pushButton to switch to the SelfEsteemTab in the stackedWidget
        self.MainWindow.SelfEsteem_pushButton.clicked.connect(lambda: self.stackedWidget.setCurrentIndex(0))




#DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage
#DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage
#DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage
#DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage       
#DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage         #DepressionPage


        self.DepressionTab = DepressionTab(PsycheEval_MainWindow, self.stackedWidget)
        

#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage
#StressPage             #StressPage             #StressPage             #StressPage             #StressPage

        self.StressTab = StressTab(PsycheEval_MainWindow, self.stackedWidget)

#General Page           #General Page           #General Page           #General Page
#General Page           #General Page           #General Page           #General Page     
#General Page           #General Page           #General Page           #General Page
#General Page           #General Page           #General Page           #General Page
#General Page           #General Page           #General Page           #General Page        


        self.GeneralTab = GeneralTab(PsycheEval_MainWindow, self.stackedWidget)


#Preview                #Preview                #Preview                #Preview                #Preview
#Preview                #Preview                #Preview                #Preview                #Preview
#Preview                #Preview                #Preview                #Preview                #Preview
#Preview                #Preview                #Preview                #Preview                #Preview
#Preview                #Preview                #Preview                #Preview                #Preview

         ## Assuming self.GeneralTab is an instance of GeneralTab
        self.PreviewTab = PreviewTab(PsycheEval_MainWindow, self.stackedWidget, self.GeneralTab)


#DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage 
#DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage
#DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage 
#DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage 
#DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage           #DatabasePage  

        self.DataBaseTab = DataBaseTab(PsycheEval_MainWindow, self.stackedWidget)
        # Fetch student test summary and update the table
        db = DatabaseManager('student_tests.db')
        student_test_summary = db.fetch_student_test_summary()
        #print("Student Test Summary:", student_test_summary)  # Data Fetching Check
        self.DataBaseTab.updateTable(student_test_summary)

#Other          #Other          #Other          #Other
#Other          #Other          #Other          #Other
#Other          #Other          #Other          #Other
#Other          #Other          #Other          #Other
#Other          #Other          #Other          #Other
#Other          #Other          #Other          #Other


        self.Active_widget_vertical_lyt.addWidget(self.stackedWidget)
        self.MainWindow2.MainWindow_2_verticalLayout.addWidget(self.Active_widget)
        self.MainWindow.MainWindow_gridLayout.addWidget(self.MainWindow2.MainWindow_2, 0, 2, 1, 1)
        
       
                
        PsycheEval_MainWindow.setCentralWidget(self.MainWindow.MainWindow_grid_lyt)
        
        # Simulate a click on the GeneralTab button
       # self.MainWindow.expanded_icon_General_pushButton.setChecked(True)

        self.retranslateUi(PsycheEval_MainWindow)
        self.stackedWidget.setCurrentIndex(5)
        self.selfEsteemTab.SelfEsteem_tabWidget.setCurrentIndex(0)
        self.DepressionTab.Depression_Page_tabWidget.setCurrentIndex(1)
        self.StressTab.Stress_tabWidget.setCurrentIndex(0)

        #topbar menu
        self.MainWindow2.topbar_menu_button.toggled['bool'].connect(self.MainWindow.small_icon_widget.setHidden) # type: ignore
        self.MainWindow2.topbar_menu_button.toggled['bool'].connect(self.MainWindow.expanded_icon_widget.setVisible) # type: ignore

        # Set the initial visibility of the bars based on the button's checked state
        self.MainWindow.small_icon_widget.setHidden(self.MainWindow2.topbar_menu_button.isChecked())
        self.MainWindow.expanded_icon_widget.setVisible(self.MainWindow2.topbar_menu_button.isChecked())



        self.MainWindow.General_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_General_pushButton.setChecked) # type: ignore
        self.MainWindow.Stress_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_Stress_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_General_pushButton.toggled['bool'].connect(self.MainWindow.General_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_Stress_pushButton.toggled['bool'].connect(self.MainWindow.Stress_pushButton.setChecked) # type: ignore
        self.MainWindow.Depression_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_Depression_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_Depression_pushButton.toggled['bool'].connect(self.MainWindow.Depression_pushButton.setChecked) # type: ignore
        self.MainWindow.SelfEsteem_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_SelfEsteem_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_SelfEsteem_pushButton.toggled['bool'].connect(self.MainWindow.SelfEsteem_pushButton.setChecked) # type: ignore
        self.MainWindow.Preview_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_Preview_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_Preview_pushButton.toggled['bool'].connect(self.MainWindow.Preview_pushButton.setChecked) # type: ignore
        self.MainWindow.Database_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_Database_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_Database_pushButton.toggled['bool'].connect(self.MainWindow.Database_pushButton.setChecked) # type: ignore
        self.MainWindow.Exit_pushButton.toggled['bool'].connect(self.MainWindow.expanded_icon_Exit_pushButton.setChecked) # type: ignore
        self.MainWindow.expanded_icon_Exit_pushButton.toggled['bool'].connect(self.MainWindow.Exit_pushButton.setChecked) # type: ignore
        
                # Set the initial state of the GeneralTab button and show the corresponding page
        self.MainWindow.expanded_icon_General_pushButton.setChecked(True)
        self.stackedWidget.setCurrentIndex(3)  # Set the stackedWidget to show the GeneralTab page

    def retranslateUi(self, PsycheEval_MainWindow):
        _translate = QtCore.QCoreApplication.translate
        PsycheEval_MainWindow.setWindowTitle(_translate("PsycheEval_MainWindow", "PsycheEval"))
        self.MainWindow.logo_mainlabel.setText(_translate("PsycheEval_MainWindow", "PsycheEval"))
        self.MainWindow.expanded_icon_General_pushButton.setText(_translate("PsycheEval_MainWindow", "   General"))
        self.MainWindow.expanded_icon_Stress_pushButton.setText(_translate("PsycheEval_MainWindow", "   Stress "))
        self.MainWindow.expanded_icon_Depression_pushButton.setText(_translate("PsycheEval_MainWindow", "   Depression"))
        self.MainWindow.expanded_icon_SelfEsteem_pushButton.setText(_translate("PsycheEval_MainWindow", "   Self-Esteem"))
        self.MainWindow.expanded_icon_Preview_pushButton.setText(_translate("PsycheEval_MainWindow", "   Preview"))
        self.MainWindow.expanded_icon_Database_pushButton.setText(_translate("PsycheEval_MainWindow", "   Database"))
        self.MainWindow.expanded_icon_Exit_pushButton.setText(_translate("PsycheEval_MainWindow", "   Exit"))
        
        # Set text for self-esteem questions
        self.selfEsteemTab.selfEsteem_instructions.setText(_translate("PsycheEval_MainWindow", "Rate how much you believe each statement from 1 to 5:"))
        for question_num, question_text in enumerate(SelfEsteemTab.questions, start=1):
                no_label = self.selfEsteemTab.question_widgets[f"SE_Q{question_num}_no_Label"]
                question_label = self.selfEsteemTab.question_widgets[f"SE_Q{question_num}_question"]
                no_label.setText(_translate("PsycheEval_MainWindow", str(question_num)))
                question_label.setText(_translate("PsycheEval_MainWindow", question_text))

                # Set text for depression questions
        self.DepressionTab.depression_instructions.setText(_translate("PsycheEval_MainWindow", "Click the number that best describes you:"))
        for question_num, (a1_text, a2_text) in enumerate(self.DepressionTab.questions, start=1):
                no_label = self.DepressionTab.question_labels[f"DT_Q{question_num}"]
                a1_label = self.DepressionTab.a1_labels[f"DT_Q{question_num}_A1_Label"]
                a2_label = self.DepressionTab.a2_labels[f"DT_Q{question_num}_A2_Label"]

                no_label.setText(_translate("PsycheEval_MainWindow", str(question_num)))
                a1_label.setText(_translate("PsycheEval_MainWindow", a1_text))
                a2_label.setText(_translate("PsycheEval_MainWindow", a2_text))

                if question_num == 14:
                        a1_label_2 = self.DepressionTab.a1_labels[f"DT_Q{question_num}_A1_Label_2"]
                        a2_label_2 = self.DepressionTab.a2_labels[f"DT_Q{question_num}_A2_Label_2"]
                        a1_label_2.setText(_translate("PsycheEval_MainWindow", "negative and harmful to self"))
                        a2_label_2.setText(_translate("PsycheEval_MainWindow", "as opportunities for growth"))
                elif question_num == 15:
                        a1_label_2 = self.DepressionTab.a1_labels[f"DT_Q{question_num}_A1_Label_2"]
                        a2_label_2 = self.DepressionTab.a2_labels[f"DT_Q{question_num}_A2_Label_2"]
                        a1_label_2.setText(_translate("PsycheEval_MainWindow", "be better off if I weren’t here"))
                        a2_label_2.setText(_translate("PsycheEval_MainWindow", "I’m here)"))
                
                # Set the text for the buttons (1-5)
        for question_num in range(1, 16):  # Assuming there are 15 questions
                for btn_num in range(1, 6):
                        button = self.DepressionTab.buttons[f"DT_{question_num}_pushButton_{btn_num}"]
                        button.setText(_translate("PsycheEval_MainWindow", str(btn_num)))


        # Update the stress questions
        self.StressTab.stress_instructions.setText(_translate("PsycheEval_MainWindow", "In the last month, how often have you:"))                
        self.StressTab.Never_Label.setText(_translate("PsycheEval_MainWindow", "Never"))
        self.StressTab.AlmostNever_label.setText(_translate("PsycheEval_MainWindow", "Almost Never"))
        self.StressTab.Sometimes_label.setText(_translate("PsycheEval_MainWindow", "Sometimes"))
        self.StressTab.FairlyOften_label.setText(_translate("PsycheEval_MainWindow", "Fairly Often"))
        self.StressTab.VeryOften_label.setText(_translate("PsycheEval_MainWindow", "Very Often"))



        for question_num, question_text in enumerate(self.StressTab.questions, start=1):
            q_num_label = self.StressTab.question_widgets[f"ST_Q{question_num}_no_Label"]
            q_text_label = self.StressTab.question_widgets[f"ST_Q{question_num}_question"]
            q_num_label.setText(_translate("PsycheEval_MainWindow", str(question_num)))
            q_text_label.setText(_translate("PsycheEval_MainWindow", question_text))


        self.GeneralTab.GeneralTabTitle_label.setText(_translate("PsycheEval_MainWindow", "General Information"))
        self.GeneralTab.general_name_label.setText(_translate("PsycheEval_MainWindow", "Full Student Name:"))
        self.GeneralTab.general_school_label.setText(_translate("PsycheEval_MainWindow", "School:"))
        self.GeneralTab.general_gender_label.setText(_translate("PsycheEval_MainWindow", "Gender :"))
        self.GeneralTab.general_male_label.setText(_translate("PsycheEval_MainWindow", "Male"))
        self.GeneralTab.general_female_label.setText(_translate("PsycheEval_MainWindow", "Female"))
        self.GeneralTab.general_date_instructions.setText(_translate("PsycheEval_MainWindow", "(month/day/year)"))
        self.GeneralTab.general_dateofBirth_label.setText(_translate("PsycheEval_MainWindow", "Date of Birth:"))
        self.GeneralTab.general_todaysdate_label.setText(_translate("PsycheEval_MainWindow", "Today\'s Date:"))
        self.GeneralTab.general_instructions.setText(_translate("PsycheEval_MainWindow", "Fill out the information below then tick:"))
        self.PreviewTab.PreviewTabTitle_label.setText(_translate("PsycheEval_MainWindow", "Preview Information"))
        self.PreviewTab.preview_instructions.setText(_translate("PsycheEval_MainWindow", "Click the \"Not Saved\" button when you ensure that the information is correct:"))
        self.PreviewTab.preview_name_label.setText(_translate("PsycheEval_MainWindow", "Full Student Name:"))
        self.PreviewTab.preview_school_label.setText(_translate("PsycheEval_MainWindow", "School:"))
        self.PreviewTab.preview_gender_label.setText(_translate("PsycheEval_MainWindow", "Gender :"))
        self.PreviewTab.preview_date_instructions.setText(_translate("PsycheEval_MainWindow", "(month/day/year)"))
        self.PreviewTab.preview_dateofBirth_label_2.setText(_translate("PsycheEval_MainWindow", "Date of Birth:"))
        self.PreviewTab.preview_todaysdate_label.setText(_translate("PsycheEval_MainWindow", "Today\'s Date:"))
        self.PreviewTab.preview_stress_label.setText(_translate("PsycheEval_MainWindow", "Stress:"))
        self.PreviewTab.preview_depression_label.setText(_translate("PsycheEval_MainWindow", "Depression:"))
        self.PreviewTab.preview_selfEsteem_label.setText(_translate("PsycheEval_MainWindow", "SelfEsteem:"))
        self.DataBaseTab.database_refresh_button.setText(_translate("PsycheEval_MainWindow", "Refresh"))
        self.DataBaseTab.database_edit_button.setText(_translate("PsycheEval_MainWindow", "Edit"))
        self.DataBaseTab.database_undo_button.setText(_translate("PsycheEval_MainWindow", "Undo"))
        self.DataBaseTab.database_reset_button.setText(_translate("PsycheEval_MainWindow", "Reset"))
        
import resource_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    PsycheEval_MainWindow = QtWidgets.QMainWindow()
    ui = Ui_PsycheEval_MainWindow()
    ui.setupUi(PsycheEval_MainWindow)
    PsycheEval_MainWindow.show()
    sys.exit(app.exec_())
